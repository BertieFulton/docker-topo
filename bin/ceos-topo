#!/usr/bin/env python3
import argparse
import logging
import yaml
import os
import docker
import os.path
import netaddr
import subprocess

LOG = logging.getLogger(__name__)
DOCKER = docker.from_env()
CONF_DIR = './config'
PREFIX = 'CEOS-LAB'
CEOS_IMAGE = 'ceos:latest'
PUBLISH_BASE = 8000
OOB_PREFIX = '192.168.100.0/24'
VERSION = "1"
SUDO = None
SUPPORTED_DRIVERS = ['macvlan', 'bridge', 'veth']
DEVNULL = open(os.devnull, 'w')

def parse_args():
    parser = argparse.ArgumentParser(description="Tool to create cEOS topologies")
    group = parser.add_mutually_exclusive_group()
    parser.add_argument(
        '-d', '--debug',
        help='Enable Debug',
        action='store_true'
    )
    group.add_argument(
        "--create",
        help="Create topology",
        action="store_true"
    )
    group.add_argument(
        "--destroy",
        help="Destroy topology",
        action="store_true"
    )
    group.add_argument(
        "--sudo",
        help="Sudo password"
    )
    parser.add_argument(
        "topology",
        help='Topology file',
        type=str
    )
    args = parser.parse_args()
    return args


def run_cmd(command, sudo=False):
    if sudo:
        sudo_prefix = 'sudo '
    else:
        sudo_prefix = ''
    cmd = sudo_prefix + command
    LOG.debug("Running command: {}".format(cmd))
    return subprocess.call(cmd, shell=True, stdout=DEVNULL, stderr=subprocess.STDOUT)

def enable_lldp(networks):
    for each in networks:
        try:
            cmd = 'echo 16384 > /sys/class/net/br-{}/bridge/group_fwd_mask'.format(each.network.id[:12])
            run_cmd(cmd)
        except:
            continue
    return


def kill_agetty():
    cmd = 'pkill agetty'
    run_cmd(cmd)
    return

def parse_endpoints(devices, endpoints, link, idx):
    """
    Parses a single endpoints list in the format:
    ["Device-A:Interface-1", "cvp-1", "host-1", "host-2:Eth1", "host-3:Eth2:192.168.10.30/24"]
    Updates devices dictionary
    """
    start_mode = 'manual' if link.driver == 'veth' else 'auto'
    for endpoint in endpoints:
        # Example: ep == "host-3:Eth2:192.168.10.30/24"
        ep = endpoint.split(':')
        # Example: ep == ["host-3", "Eth2", "192.168.10.30/24"]
        if not ep:
            LOG.error('Link contains empty definition')
        device_name = ep.pop(0)
        # Example: device_name == "host-3"
        # We only support CVP, Host and CEOS device types
        if 'cvp' in device_name.lower():
            # The below is dict.get(key, default) 
            device = devices.get(device_name, CVP(device_name, start_mode))
        elif 'host' in device_name.lower():
            # Example: ep == ["Eth2","192.168.10.30/24"]
            device = devices.get(device_name, Host(device_name, start_mode))
            if len(ep) > 1:
                # This means we have intf name _AND_ IP address
                ip = ep.pop()
                device.add_ip(ip, ep[0])            
        else:
            device = devices.get(device_name, CEOS(device_name, start_mode))
        if ep:
            int_name = ep.pop()
        else:
            # ep is None, meaning endpoint was defined without
            # interface name, like "host-2"
            int_name = 'eth{}'.format(idx)
        # Remember device connections
        device.connect(int_name, link)
        devices[device_name] = device   

def parse_v1(t_yml):
    """
    Reads the topology definition in the following format:
    links:
      - ["Device-A:Interface-1", "Device-B:Interface-3"]
      - ["Device-A:Interface-1", "cvp-1", "host-1", "host-2:Eth1", "host-3:Eth2:192.168.10.30/24"]
    Returns a dict of devices and a list links
    """
    devices = dict()
    links = list()
    for idx, link_dsc in enumerate(t_yml['links']):
        # Example: link_dsc == ["Device-A:Interface-1", "cvp-1", "host-1", "host-3:Eth2:192.168.10.30/24"]
        if len(link_dsc) == 2:
            # Example: link_dsc == ["Device-A:Interface-1", "cvp-1"]
            link_type = 'p2p'
        else:
            # Example: link_dsc == ["Device-A:Interface-1", "cvp-1", "host-1"]
            link_type = 'mpoint'
        link = Link(link_type, 'net-{}'.format(idx))
        links.append(link)
        parse_endpoints(devices, link_dsc, link, idx)
    return devices, links

def parse_v2(t_yml):
    """
    Reads the topology definition in the following format:
    links:
      - driver: macvlan (Optional)
        driver_opts: (Optional)
          parent: eth0
        endpoints: ["Device-A:Interface-1", "Device-B:Interface-3"]
      - endpoints:
          - Device-A:Interface-1
          - cvp-1
          - host-1
          - host-2:Eth1
          - host-3:Eth2:192.168.10.30/24
    Returns a dict of devices and a list of links
    """
    devices = dict()
    links = list()
    for idx, link_dsc in enumerate(t_yml['links']):
        # Example: link_dsc == {'driver': 'macvlan', 'driver_opts': {'parent': 'eth1'},
        # endpoints: ["Device-A:Interface-1", "cvp-1", "host-1", "host-3:Eth2:192.168.10.30/24"]}
        LOG.debug("parsing link {}".format(link_dsc))
        # Link-specific driver takes priority over topology-specific 
        link_driver = link_dsc.get('driver', t_yml.get('driver', None))
        driver_opts = link_dsc.get('driver_opts', None)
        link_endpoints = link_dsc.get('endpoints', None)
        if not link_endpoints:
            LOG.error("Missing endpoints definition")
        else:
            LOG.debug("parsing endpoints {}".format(link_endpoints))
        if len(link_endpoints) <= 2:
            # Example: link_dsc == ["Device-A:Interface-1", "cvp-1"]
            link_type = 'p2p'
        else:
            # Example: link_dsc == ["Device-A:Interface-1", "cvp-1", "host-1"]
            link_type = 'mpoint'
        link = Link(link_type, 'net-{}'.format(idx), link_driver, driver_opts)
        links.append(link)
        parse_endpoints(devices, link_endpoints, link, idx)
    return devices, links

class Device(object):
    def __init__(self, name, start_mode='auto'):
        LOG.debug('\tConstructing device {} with start_mode={}'.format(name, start_mode))
        self.name = '_'.join([PREFIX, name])
        # Setting up defaults
        self.type = ''
        self.image = ''
        self.command = ''
        self.environment = dict()
        self.default_network = 'bridge'
        self.start_mode = start_mode
        self.pid = None
        # Setting up extra variablesSUDO
        self.interfaces = dict()
        self.volumes = dict()
        self.ports = dict()
        # Pointer to docker SDK object
        self.container = None

    def _get_or_create(self):
        LOG.debug('\tObtaining a pointer to container {}'.format(self.name))
        # Checking if container already exists
        self.container = self.get()
        # If doesn't exist creating a new container
        if not self.container:
            self.container = self._create()
        return
    
    def _update(self):
        self.container = self.get()
    
    def _create(self):
        return DOCKER.containers.create(
                self.image,
                command=self.command,
                environment=self.environment,
                volumes=self.volumes,
                network=self.default_network,
                privileged=True,
                name=self.name,
                detach=True,
                hostname=self.name,
                ports=self.ports,
                labels={PREFIX: self.name}
            )

    def get(self):
        try:
            return DOCKER.containers.get(self.name)
        except docker.errors.NotFound:
            return None

    def start(self):
        LOG.debug('\tStarting container {}'.format(self.name))
        if not self.container:
            self._get_or_create()
        if self.container.status == 'running':
            LOG.info('Container {} already running'.format(self.name))
            return 1
        if self.start_mode == 'auto':
            self._attach()
            self.container.start()
        elif self.start_mode == 'manual':
            self.container.start()
            self._update()
            self.pid = self.container.attrs.get('State', {}).get('Pid', None)
            LOG.debug('\tPID for container {} is {}'.format(self.name, self.pid))
            cmd1 = "mkdir -p /var/run/netns"
            rc = run_cmd(cmd1, True)
            if rc:
                LOG.debug('\tFailed to create /var/run/netns directory')
            cmd2 = "ln -sf /proc/{}/ns/net /var/run/netns/{}".format(self.pid, self.name)
            rc = run_cmd(cmd2, True)
            if rc:
                LOG.debug('\tFailed to create symlink /proc/{}/ns/net -> /var/run/netns/{}'.format(self.pid, self.name))
            self.container.pause()
            self._attach()
            self.container.unpause()
            # This is to fix the scripts who assign IPs in entrypoint
            if self.type == 'host':
                LOG.debug("Running set ips script")
                rc, output = self.container.exec_run("/set_ips.sh")
                LOG.debug("RC = {}, output = {}".format(rc, output))
        else:
            LOG.info('Unsupported container start mode {}'.format(self.start_mode))
        return 0

    def connect(self, interface, link):
        LOG.debug('\tCreating a pointer to network {} for interface {}'.format(link.name, interface))
        self.interfaces[interface] = link
        return

    def _attach(self):
        for interface in sorted(self.interfaces):
            LOG.debug('\tAttaching container {} interface {} to its link'
                      .format(self.name, interface))
            link = self.interfaces[interface]
            link.connect(self.container, interface)
        return

    def kill(self):
        LOG.debug('\tKilling container {}'.format(self.name))
        if not self.container:
            self._get_or_create()
        
        if self.container.status not in ['running', 'paused']:
            LOG.info('Container {} is not running'.format(self.name))
            DOCKER.containers.prune(
                filters={'label': PREFIX}
            )
            return 1
        self.container.kill()

        if self.start_mode == 'manual':
            cmd = "rm /var/run/netns/{}".format(self.name)
            run_cmd(cmd, True)
        return 0

class CEOS(Device):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        # Overriding defaults
        self.type = 'ceos'
        self.image = CEOS_IMAGE
        self.command = "/sbin/init"
        self.environment = {
                               "CEOS": 1,
                               "EOS_PLATFORM": "ceossim",
                               "container": "docker",
                               "ETBA": 1,
                               "SKIP_ZEROTOUCH_BARRIER_IN_SYSDBINIT": 1,
                               "INTFTYPE": "eth"
                           }
        # Overriding extra variables
        self.volumes = self._get_config()

    def _get_config(self):
        startup = os.path.join(CONF_DIR, self.name)
        # Docker requires absolute path in volumes
        startup = os.path.abspath(startup)
        if os.path.isfile(startup):
            return {startup: {
                            'bind': "/mnt/flash/startup-config",
                            'mode': 'rw'}
                    }
        else:
            return {}

    def publish_port(self, inside, outside, proto='tcp'):
        self.ports['{}/{}'.format(inside, proto)] = outside


class Host(Device):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        # Overriding defaults
        self.type = 'host'
        self.image = 'alpine-host:latest'
        if self.start_mode == 'manual':
            self.default_network = 'none'
        # CMD will contain a list of IPs to assign to interfaces
        self.command = []

    @staticmethod
    def _verify_addr(ip):
        prefix = netaddr.IPNetwork(ip)
        return prefix.prefixlen < 32

    def add_ip(self, ip, intf):
        LOG.debug("Adding IP address command line argument for IP {}".format(ip))
        if self._verify_addr(ip):
            self.command.append(':'.join([intf, ip]))


class CVP(Device):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        # Overriding defaults
        self.type = 'cvp'
        self.image = 'cvp:latest'
        self.ports = {'443/tcp': 443}
        self.prefix = OOB_PREFIX
        self.command = self._get_ip_mask()

    def _get_ip_mask(self):
        prefix = netaddr.IPNetwork(self.prefix)
        # Giving CVP the last IP from the OOB subnet
        return [str(prefix[-2]), str(prefix.netmask)]

class Veth(object):
    def __init__(self, name):
        self.name = name

    def _create(self):
        cmd = "ip link add {l}-a type veth peer name {l}-b".format(l=self.name)
        rc = run_cmd(cmd, True)
        return rc

    def _get(self):
        cmd = "ip link show {}-b".format(self.name)
        rc = run_cmd(cmd, True)
        return rc

    def connect(self, container, interface):
        if self._get():
            self._create()
            veth_name = self.name + "-a"
        else:
            veth_name = self.name + "-b"
        LOG.debug("Connecting {} to {}".format(veth_name, container.name))
        cmd1 = "ip link set {} netns {}".format(veth_name, container.name)
        cmd2 = "ip netns exec {} ip link set {} name {}".format(container.name, veth_name, interface)
        cmd3 = "ip netns exec {} ip link set {} up".format(container.name, interface)
        all_commands = [cmd1, cmd2, cmd3]
        executed = [run_cmd(cmd, True) == 0 for cmd in all_commands]
        if all(executed):
            LOG.debug("Link {} is connected to container {}".format(self.name, container.name))
        else:
            LOG.debug("Some commands failed when connecting veth to container {}".format(container.name))     


class Link(object):
    def __init__(self, link_type, name, link_driver=None, driver_opts=None):
        LOG.debug('\tConstructing a {} link with name {}'.format(link_type, name))
        self.name = '_'.join([PREFIX, name])
        self.link_type = link_type
        self.network = None
        self.opts = driver_opts if driver_opts else {}

        if link_driver:
            self.driver = link_driver
        else:
            self.driver = 'bridge'
        LOG.debug('\t The driver to be used for link {} is {}'.format(name, link_driver))
        if self.driver == 'veth':
            self.veth = Veth(self.name)
        else:
            self.veth = None

        if not self.driver in SUPPORTED_DRIVERS:
            LOG.error("Unsupported link driver {}".format(link_driver))


    def get_or_create(self):
        LOG.debug('\tObtaining a pointer to network {}'.format(self.name))
        self.network = self._get()
        if not self.network:
            self.network = self._create()
        return self.network

    def _create(self):
        LOG.debug('\tCreating a new network {} of type {}'.format(self.name, self.driver))
        return DOCKER.networks.create(
                self.name,
                driver=self.driver,
                labels={PREFIX: self.name},
                options=self.opts
            )

    def _get(self):
        LOG.debug("Trying to find an existing network with name {}".format(self.name))
        if self.driver == 'veth':
            return Veth(self.name)
        try:
            return DOCKER.networks.get(self.name)
        except docker.errors.NotFound:
            LOG.debug("Network {} not found".format(self.name))
            return None

    def connect(self, container, interface):
        LOG.debug('\tConnecting {}-type link to {}'.format(self.driver, container.name))
        if not self.network:
            self.get_or_create()
        if self.driver == 'veth':
            self.network.connect(container, interface)
        else:
            self.network.connect(container)
    
    def kill(self):
        if self.driver == 'veth':
            pass

def main():
    # Initializing main variables
    global PREFIX, CEOS_IMAGE, CONF_DIR, PUBLISH_BASE, OOB_PREFIX, VERSION, SUDO

    # Assigning arguments
    args    = parse_args()
    debug   = args.debug
    create  = args.create
    t_file  = os.path.join(os.getcwd(), args.topology)
    t_fn    = os.path.split(args.topology)[-1]
    destroy = args.destroy
    SUDO    = os.getenv('SUDO', args.sudo)
    PREFIX  = t_fn.split('.')[0]

    # Logging settings
    if debug:
        log_level = logging.DEBUG
    else:
        log_level = logging.INFO
    logging.basicConfig(level=log_level)

    # Loading topology YAML file
    with open(t_file, 'r') as stream:
        t_yml = yaml.load(stream)
    LOG.debug("Loaded topology from YAML file {}\n {}"
                 .format(t_file, yaml.dump(t_yml)))
    if 'links' not in t_yml:
        LOG.info('"links" dictionary is not found in {}'
                    .format(t_file))
        return 1

    # Loading optional variables
    # First check if it's specified in topoology.yml
    # Then check if it's an env variable, last accept default
    CEOS_IMAGE = t_yml.get('CEOS_IMAGE', os.getenv('CEOS_IMAGE', CEOS_IMAGE))
    CONF_DIR = t_yml.get('CONF_DIR',os.getenv('CONF_DIR', CONF_DIR))
    PUBLISH_BASE = int(t_yml.get('PUBLISH_BASE', os.getenv('PUBLISH_BASE', PUBLISH_BASE)))
    OOB_PREFIX = t_yml.get('OOB_PREFIX',os.getenv('OOB_PREFIX', OOB_PREFIX))
    VERSION = str(t_yml.get('VERSION',os.getenv('VERSION', VERSION)))

    # Versioned parsing logic
    if VERSION == "1":
        devices, links = parse_v1(t_yml)
    elif VERSION == "2":
        devices, links = parse_v2(t_yml)
    else:
        LOG.error("Specified version {} is not supported".format(VERSION))
        return 1
    

    # Publishing ports.
    if PUBLISH_BASE:
        # Sort all device names alphabetically
        for idx,name in enumerate(sorted(devices.keys())):
            # Publish internal HTTPS port to external base
            # port offset by device's index (only for CEOS devices)
            if devices[name].type == 'ceos':
                devices[name].publish_port('443',PUBLISH_BASE+idx)

    # Main logic
    if create:
        started = [device.start() == 0 for (name, device) in devices.items()]
        if all(started):
            LOG.info('All devices started successfully')
            enable_lldp(links)
            return 0
        else:
            LOG.info('Devices have not been started')
            return 1
    if destroy:
        killed = [device.kill() == 0 for (name, device) in devices.items()]
        # Regardless of whether we killed or not, try to prune unused objects
        DOCKER.networks.prune(
            filters={'label': PREFIX}
        )
        DOCKER.containers.prune(
            filters={'label': PREFIX}
        )
        kill_agetty()
        if all(killed):
            LOG.info('All devices destroyed successfully')
            return 0
        else:
            LOG.info('Devices have not been destroyed')
            return 1


if __name__ == '__main__':
    main()
