#!/usr/bin/env python3
import argparse
import logging
import yaml
import docker
import os.path
import netaddr

LOG = logging.getLogger(__name__)
DOCKER = docker.from_env()
CONF_DIR = './config'
PREFIX = 'CEOS-LAB'
CEOS_IMAGE = 'ceos:latest'


def parse_args():
    parser = argparse.ArgumentParser(description="Tool to create cEOS topologies")
    group = parser.add_mutually_exclusive_group()
    parser.add_argument(
        '-d', '--debug',
        help='Enable Debug',
        action='store_true'
    )
    group.add_argument(
        "--create",
        help="Create topology",
        action="store_true"
    )
    group.add_argument(
        "--destroy",
        help="Destroy topology",
        action="store_true"
    )
    parser.add_argument(
        "topology",
        help='Topology file',
        type=str
    )
    args = parser.parse_args()
    return args


def enable_lldp(networks):
    import subprocess
    for each in networks:
        cmd = 'echo 16384 > /sys/class/net/br-{}/bridge/group_fwd_mask'.format(each.network.id[:12])
        subprocess.call(cmd, shell=True)
    return


def kill_agetty():
    import subprocess
    cmd = 'pkill agetty'
    subprocess.call(cmd, shell=True)
    return


class Device(object):
    def __init__(self, name):
        LOG.debug('Constructing device {}'.format(name))
        self.name = name
        # Setting up defaults
        self.image = ''
        self.command = ''
        self.environment = dict()
        # Setting up extra variables
        self.interfaces = dict()
        self.volumes = dict()
        self.ports = dict()
        self.sequence = 0
        self.network = 'bridge'

    def _create(self):
        LOG.debug('Obtaining a pointer to container {}'.format(self.name))
        # Checking if container already exists
        container = self._get_container()
        # If doesn't exist creating a new container
        if not container:
            container = DOCKER.containers.create(
                self.image,
                command=self.command,
                environment=self.environment,
                volumes=self.volumes,
                network=self.network,
                privileged=True,
                name=self.name,
                detach=True,
                hostname=self.name,
                ports=self.ports,
                labels={PREFIX: self.name}
            )
        return container

    def _get_container(self):
        try:
            return DOCKER.containers.get(self.name)
        except docker.errors.NotFound:
            return None

    def start(self):
        LOG.debug('Starting container {}'.format(self.name))
        container = self._create()
        if container.status == 'running':
            LOG.info('Container {} already running'.format(self.name))
            return 1
        self._attach(container)
        container.start()
        return 0

    def connect(self, interface, link):
        LOG.debug('Creating a pointer to network {} for interface {}'.format(link.name, interface))
        self.interfaces[interface] = link
        return

    def _attach(self, container):
        for interface in sorted(self.interfaces):
            LOG.debug('Attaching container {} interface {} to its link'
                      .format(self.name, interface))
            link = self.interfaces[interface]
            link.connect(container)
        return

    def stop(self):
        LOG.debug('Stopping container {}'.format(self.name))
        container = self._create()
        if container.status != 'running':
            LOG.info('Container {} is not running'.format(self.name))
            DOCKER.containers.prune(
                filters={'label': PREFIX}
            )
            return 1
        container.stop()
        return 0


class CEOS(Device):
    def __init__(self, name):
        super().__init__(name)
        # Overriding defaults
        self.image = CEOS_IMAGE
        self.command = "/sbin/init"
        self.environment = {
                               "CEOS": 1,
                               "EOS_PLATFORM": "Docker",
                               "container": "docker",
                               "ETBA": 1,
                               "SKIP_ZEROTOUCH_BARRIER_IN_SYSDBINIT": 1,
                               "INTFTYPE": "eth"
                           }
        # Overriding extra variables
        self.volumes = self._get_config()

    def _get_config(self):
        startup = os.path.join(CONF_DIR, self.name)
        # Docker requires absolute path in volumes
        startup = os.path.abspath(startup)
        if os.path.isfile(startup):
            return {startup: {
                            'bind': "/mnt/flash/startup-config",
                            'mode': 'ro'}
                    }
        else:
            return {}

    def publish_port(self, inside, outside, proto='tcp'):
        self.ports['{}/{}'.format(inside, proto)] = outside


class Host(Device):
    def __init__(self, name):
        super().__init__(name)
        # Overriding defaults
        self.image = 'alpine-host:latest'
        self.volumes = self._get_config()

    def _get_config(self):
        startup = os.path.join(CONF_DIR, self.name)
        # Docker requires absolute path in volumes
        startup = os.path.abspath(startup)
        if os.path.isfile(startup):
            return {startup: {
                            'bind': "/home/alpine/set_ip.sh",
                            'mode': 'rw'}
                    }
        else:
            return {}

    def _create(self):
        # This code is to override the default behaviour of connecting
        # the first interface to the default docker bridge
        # We're pulling the first network name from the list of
        # interfaces (which may contain >1 elements)
        # and overriding the default network with this name
        int_name = next(iter(self.interfaces))
        LOG.debug("Making {} a default network for {}"
                  .format(int_name, self.name))
        self.network = self.interfaces.pop(int_name).name
        LOG.debug("The remaining interfaces that will be connected before the start are {}"
                  .format(self.interfaces.keys()))
        return super()._create()


class CVP(Device):
    def __init__(self, name):
        super().__init__(name)
        # Overriding defaults
        self.image = 'cvp:latest'
        self.ports = {'443/tcp': 443}


class Link(object):
    def __init__(self, link_type, name):
        LOG.debug('Constructing a {} link with name {}'.format(link_type, name))
        self.name = name
        self.link_type = link_type
        self.network = self.get_network()
        if not self.network:
            self.network = DOCKER.networks.create(
                self.name,
                driver='bridge',
                labels={PREFIX: self.name}
            )

    def get_network(self):
        try:
            return DOCKER.networks.get(self.name)
        except docker.errors.NotFound:
            return None

    def connect(self, device):
        LOG.debug('Connecting link to {}'.format(device.name))
        return self.network.connect(device)


def main():
    # Initializing main variables
    global PREFIX, CEOS_IMAGE, CONF_DIR
    devices = dict()
    links = list()

    # Assigning arguments
    args = parse_args()
    debug = args.debug
    create = args.create
    t_file = os.path.join(os.getcwd(), args.topology)
    destroy = args.destroy
    PREFIX = args.topology.split('.')[0]

    # Logging settings
    if debug:
        log_level = logging.DEBUG
    else:
        log_level = logging.INFO
    logging.basicConfig(level=log_level)

    # Loading topology YAML file
    with open(t_file, 'r') as stream:
        t_yml = yaml.load(stream)
    LOG.debug("Loaded topology from YAML file {}\n {}"
                 .format(t_file, yaml.dump(t_yml)))
    if 'links' not in t_yml:
        LOG.info('"link" dictionary is not found in {}'
                    .format(t_file))
        return 1

    # Loading optional variables
    CONF_DIR = t_yml.get('CONF_DIR', CONF_DIR)
    PREFIX = t_yml.get('PREFIX', PREFIX)
    CEOS_IMAGE = t_yml.get('CEOS_IMAGE', CEOS_IMAGE)

    # Parsing links in the format ["Device-A:Interface-1", "Device-B:Interface-3"]
    # Or ["Device-A:Interface-1", "cvp-1", "host-1", "host-2:Eth1", "host-2:Eth2"]
    for idx, link_dsc in enumerate(t_yml['links']):
        if len(link_dsc) == 2:
            link = Link('p2p', 'net-{}'.format(idx))
        else:
            link = Link('mpoint', 'net-{}'.format(idx))
        links.append(link)
        for endpoint in link_dsc:
            ep = endpoint.split(':')
            if not ep:
                LOG.info('Link contains empty definition')
                return 1
            device_name = ep.pop(0)
            if 'cvp' in device_name.lower():
                device = devices.get(device_name, CVP(device_name))
            elif 'host' in device_name.lower():
                device = devices.get(device_name, Host(device_name))
            else:
                device = devices.get(device_name, CEOS(device_name))
            if ep:
                int_name = ep.pop()
            else:
                # Note that this would result in an unpredictable connections
                # when multiple ports are connected to the same link
                # To avoid that explicitly specify interface name
                # As in "device:interface"
                int_name = 'eth{}'.format(idx)
            # Remember device connections
            device.connect(int_name, link)
            devices[device_name] = device

    # Publishing ports.
    publish_base = t_yml.get('publish_base', None)
    # If 'publish_base' variable is defined in YAML file
    if publish_base:
        # Sort all device names alphabetically
        for idx,name in enumerate(sorted(devices.keys())):
            # Publish internal HTTPS port to external base
            # port offset by device's index
            devices[name].publish_port('443',publish_base+idx)

    # Main logic
    if create:
        started = [device.start() == 0 for (name, device) in devices.items()]
        if all(started):
            LOG.info('All devices started successfully')
            enable_lldp(links)
            return 0
        else:
            LOG.info('Devices have not been started')
            return 1
    if destroy:
        stopped = [device.stop() == 0 for (name, device) in devices.items()]
        # Regardless of whether we stopped or not, try to prune unused objects
        DOCKER.networks.prune(
            filters={'label': PREFIX}
        )
        DOCKER.containers.prune(
            filters={'label': PREFIX}
        )
        kill_agetty()
        if all(stopped):
            LOG.info('All devices stopped successfully')
            return 0
        else:
            LOG.info('Devices have not been stopped')
            return 1


if __name__ == '__main__':
    main()
